buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath 'org.apache.commons:commons-lang3:3.7'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/reports/jacoco")
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultPublishConfig !isReleaseBuild() ? "debug" : "release"

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }

    configurations.all {
        resolutionStrategy.force 'com.android.support:design:28.0.0'
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    def core_version = "1.5.0"
    implementation "androidx.core:core:$core_version"
    implementation "androidx.appcompat:appcompat:1.3.0"
    implementation "androidx.annotation:annotation:1.2.0"
    implementation "androidx.recyclerview:recyclerview:1.2.0"
    api('org.smartregister:opensrp-client-simprints:1.0.7-PREVIEW3-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
    }
    implementation 'com.github.bmelnychuk:atv:1.2.9'
    implementation('com.google.android.material:material:1.3.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    implementation 'com.github.johnkil.print:print:1.3.1'
    implementation 'com.github.rey5137:material:1.2.5'
    implementation 'org.smartregister:opensrp-client-materialedittext:2.1.6-SNAPSHOT'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation('com.github.ganfra:material-spinner:2.0.0') {
        exclude group: 'com.nineoldandroids', module: 'library'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation('com.google.android.gms:play-services-location:18.0.0') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation('com.google.android.gms:play-services-vision:20.1.3') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation 'org.smartregister:opensrp-client-utils:0.0.4-SNAPSHOT'
    implementation 'org.jeasy:easy-rules-core:3.3.0'
    implementation 'org.jeasy:easy-rules-mvel:3.3.0'
    implementation 'joda-time:joda-time:2.10.6'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation('io.ona.rdt-capture:lib:2.1.0') {
        exclude group: 'com.android.support.constraint', module: 'constraint-layout'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support.test', module: 'runner'
        exclude group: 'com.android.support.test.espresso', module: 'espresso-core'
        exclude group: 'com.google.android.gms', module: 'play-services-vision'
    }
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    implementation('io.ona.CircleProgressbar:lib:0.1.0@aar') {
        exclude group: 'com.android.support.constraint', module: 'constraint-layout'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support.test', module: 'runner'
        exclude group: 'com.android.support.test.espresso', module: 'espresso-core'
    }
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15
   // implementation group: 'org.bouncycastle', name: 'bcprov-jdk15', version: '1.46'

    // PowerMock
    def powerMockVersion = '2.0.7'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    implementation('com.github.raihan-mpower:FancyAlertDialog-Android:0.3') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    androidTestImplementation 'com.jayway.android.robotium:robotium-solo:5.6.3'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation('androidx.test.ext:junit:1.1.2') {
        exclude group: 'com.android.support', module: 'appcompat-v7'

    }
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation('androidx.test:rules:1.3.0') {
        exclude group: 'com.android.support', module: 'appcompat-v7'

    }
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.mockito:mockito-core:3.5.15'
    testImplementation('com.squareup:fest-android:1.0.8') { exclude module: 'support-v4' }
    testImplementation'org.robolectric:robolectric:4.4'
    testImplementation "org.json:json:20190722"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        xml.destination = file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml")
        html.enabled = true
        html.destination file("${buildDir}/reports/jacoco/jacocoRootReport/html")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

apply from: '../maven.gradle'
task javadoc(type: Javadoc) {
    failOnError false
    def mainSrc = "$project.projectDir/src/main/java"
    source = files([mainSrc])
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}
